name: Docker CI

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true

      - name: Download Go dependencies
        run: |
          go mod download
          go mod verify

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          logout: true

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/todo-app:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/todo-app:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            # Create directory if it doesn't exist
            mkdir -p /home/ubuntu/todo-app
            
            # Copy necessary files to the server
            cat > /home/ubuntu/todo-app/docker-compose.yml << 'EOL'
            version: '3.8'
            services:
              app:
                image: ${{ secrets.DOCKER_HUB_USERNAME }}/todo-app:latest
                ports:
                  - "8080:8080"
                environment:
                  - DB_HOST=db
                  - DB_PORT=5432
                  - DB_USER=postgres
                  - DB_PASSWORD=0629
                  - DB_NAME=simple_blog
                depends_on:
                  - db
                networks:
                  - todo-network
                healthcheck:
                  test: ["CMD", "wget", "--spider", "-q", "http://localhost:8080"]
                  interval: 30s
                  timeout: 10s
                  retries: 3
                restart: unless-stopped

              db:
                image: postgres:15-alpine
                environment:
                  - POSTGRES_USER=postgres
                  - POSTGRES_PASSWORD=0629
                  - POSTGRES_DB=simple_blog
                ports:
                  - "5432:5432"
                volumes:
                  - postgres_data:/var/lib/postgresql/data
                networks:
                  - todo-network
                healthcheck:
                  test: ["CMD-SHELL", "pg_isready -U postgres"]
                  interval: 10s
                  timeout: 5s
                  retries: 5
                restart: unless-stopped

            networks:
              todo-network:
                driver: bridge

            volumes:
              postgres_data:
            EOL

            # Create a script to check deployment status
            cat > /home/ubuntu/todo-app/check-deployment.sh << 'EOL'
            #!/bin/bash
            echo "Checking application status..."
            if curl -s http://localhost:8080 > /dev/null; then
                echo "Application is running!"
                exit 0
            else
                echo "Application is not responding!"
                docker-compose logs app
                exit 1
            fi
            EOL
            
            chmod +x /home/ubuntu/todo-app/check-deployment.sh

            # Navigate to the application directory
            cd /home/ubuntu/todo-app
            
            echo "Pulling latest images..."
            docker-compose pull
            
            echo "Stopping existing containers..."
            docker-compose down --remove-orphans
            
            echo "Starting new containers..."
            docker-compose up -d
            
            # Wait for services to be ready
            echo "Waiting for services to be ready..."
            sleep 30
            
            # Check deployment status
            ./check-deployment.sh 